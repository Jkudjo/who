#!/bin/bash

# SSH Security Monitor & IP Banning System
# Enhanced version with comprehensive security features
# Author: Enhanced SSH Security Tool
# Version: 2.1.0

set -euo pipefail  # Strict error handling

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m' # No Color

# Configuration
readonly CONFIG_FILE="/etc/ssh-monitor.conf"
readonly DEFAULT_LOGFILE="/var/log/auth.log"
readonly DEFAULT_THRESHOLD=2
readonly DEFAULT_BANNED_LOG="/var/log/ssh-banned.log"
readonly DEFAULT_WHITELIST_FILE="/etc/ssh-monitor-whitelist"
readonly DEFAULT_BLACKLIST_FILE="/etc/ssh-monitor-blacklist"
readonly DEFAULT_GEOIP_TIMEOUT=5
readonly DEFAULT_REPORT_FILE="/var/log/ssh-monitor-report.log"
readonly DEFAULT_CACHE_FILE="/tmp/ssh-monitor-cache.json"
readonly DEFAULT_PID_FILE="/var/run/ssh-monitor.pid"

# Global variables
LOGFILE="$DEFAULT_LOGFILE"
THRESHOLD="$DEFAULT_THRESHOLD"
BANNED_LOG="$DEFAULT_BANNED_LOG"
WHITELIST_FILE="$DEFAULT_WHITELIST_FILE"
BLACKLIST_FILE="$DEFAULT_BLACKLIST_FILE"
GEOIP_TIMEOUT="$DEFAULT_GEOIP_TIMEOUT"
REPORT_FILE="$DEFAULT_REPORT_FILE"
CACHE_FILE="$DEFAULT_CACHE_FILE"
PID_FILE="$DEFAULT_PID_FILE"
ENABLE_GEOIP=true
ENABLE_BANNING=true
ENABLE_REPORTING=true
ENABLE_IPv6=true
ENABLE_CACHING=true
QUIET_MODE=false
JSON_OUTPUT=false
DAEMON_MODE=false
WATCH_INTERVAL=300  # 5 minutes

# Backend configuration
BACKEND="iptables"  # Options: iptables, nftables, firewalld, pf
SERVICES="ssh"      # Comma-separated list: ssh,ftp,pop3,imap,smtp
CHAIN_NAME="SSH-MONITOR"
ZONE_NAME="ssh-monitor"

# Performance settings
MAX_CACHE_SIZE=1000
CACHE_TTL=3600  # 1 hour
BATCH_SIZE=50
LOG_BUFFER_SIZE=1000

# Logging function with performance optimization
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case "$level" in
        "INFO") echo -e "${GREEN}[INFO]${NC} $timestamp: $message" ;;
        "WARN") echo -e "${YELLOW}[WARN]${NC} $timestamp: $message" ;;
        "ERROR") echo -e "${RED}[ERROR]${NC} $timestamp: $message" ;;
        "DEBUG") [[ "${DEBUG:-false}" == "true" ]] && echo -e "${BLUE}[DEBUG]${NC} $timestamp: $message" ;;
    esac
    
    # Write to report file if enabled
    if [[ "$ENABLE_REPORTING" == "true" ]]; then
        echo "[$level] $timestamp: $message" >> "$REPORT_FILE"
    fi
}

# Error handling
error_exit() {
    log "ERROR" "$1"
    exit 1
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error_exit "This script must be run as root for firewall operations"
    fi
}

# Load configuration
load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        log "INFO" "Loading configuration from $CONFIG_FILE"
        source "$CONFIG_FILE"
    else
        log "WARN" "Configuration file not found, using defaults"
        create_default_config
    fi
}

# Create default configuration
create_default_config() {
    cat > "$CONFIG_FILE" << EOF
# SSH Monitor Configuration
LOGFILE="$DEFAULT_LOGFILE"
THRESHOLD=$DEFAULT_THRESHOLD
BANNED_LOG="$DEFAULT_BANNED_LOG"
WHITELIST_FILE="$DEFAULT_WHITELIST_FILE"
BLACKLIST_FILE="$DEFAULT_BLACKLIST_FILE"
GEOIP_TIMEOUT=$DEFAULT_GEOIP_TIMEOUT
REPORT_FILE="$DEFAULT_REPORT_FILE"
CACHE_FILE="$DEFAULT_CACHE_FILE"
PID_FILE="$DEFAULT_PID_FILE"
ENABLE_GEOIP=true
ENABLE_BANNING=true
ENABLE_REPORTING=true
ENABLE_IPv6=true
ENABLE_CACHING=true
WATCH_INTERVAL=300

# Backend configuration
BACKEND="iptables"
SERVICES="ssh"
CHAIN_NAME="SSH-MONITOR"
ZONE_NAME="ssh-monitor"

# Performance settings
MAX_CACHE_SIZE=1000
CACHE_TTL=3600
BATCH_SIZE=50
LOG_BUFFER_SIZE=1000
EOF
    log "INFO" "Created default configuration at $CONFIG_FILE"
}

# Validate configuration
validate_config() {
    [[ -f "$LOGFILE" ]] || error_exit "Log file $LOGFILE does not exist"
    [[ -w "$LOGFILE" ]] || error_exit "Cannot read log file $LOGFILE"
    [[ "$THRESHOLD" =~ ^[0-9]+$ ]] || error_exit "Invalid threshold value: $THRESHOLD"
    [[ "$GEOIP_TIMEOUT" =~ ^[0-9]+$ ]] || error_exit "Invalid geoip timeout: $GEOIP_TIMEOUT"
    
    # Validate backend
    case "$BACKEND" in
        "iptables"|"nftables"|"firewalld"|"pf")
            ;;
        *)
            error_exit "Invalid backend: $BACKEND"
            ;;
    esac
}

# Check dependencies
check_dependencies() {
    local deps=("grep" "awk" "sort" "uniq")
    local missing=()
    
    # Add backend-specific dependencies
    case "$BACKEND" in
        "iptables")
            deps+=("iptables")
            [[ "$ENABLE_IPv6" == "true" ]] && deps+=("ip6tables")
            ;;
        "nftables")
            deps+=("nft")
            ;;
        "firewalld")
            deps+=("firewall-cmd")
            ;;
        "pf")
            deps+=("pfctl")
            ;;
    esac
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing+=("$dep")
        fi
    done
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        error_exit "Missing dependencies: ${missing[*]}"
    fi
    
    # Optional dependency check
    if ! command -v "geoiplookup" &> /dev/null; then
        log "WARN" "geoiplookup not found, geographic information will be disabled"
        ENABLE_GEOIP=false
    fi
    
    # Check for jq (for JSON caching)
    if ! command -v "jq" &> /dev/null; then
        log "WARN" "jq not found, caching will be disabled"
        ENABLE_CACHING=false
    fi
}

# Cache management functions
init_cache() {
    if [[ "$ENABLE_CACHING" == "true" ]]; then
        [[ -f "$CACHE_FILE" ]] || echo '{}' > "$CACHE_FILE"
    fi
}

get_cached_info() {
    local ip="$1"
    if [[ "$ENABLE_CACHING" == "true" && -f "$CACHE_FILE" ]]; then
        jq -r ".$ip // empty" "$CACHE_FILE" 2>/dev/null || echo ""
    fi
}

set_cached_info() {
    local ip="$1"
    local info="$2"
    if [[ "$ENABLE_CACHING" == "true" && -f "$CACHE_FILE" ]]; then
        jq ".$ip = \"$info\"" "$CACHE_FILE" > "${CACHE_FILE}.tmp" && mv "${CACHE_FILE}.tmp" "$CACHE_FILE"
    fi
}

# Enhanced IP validation with IPv6 support
is_valid_ip() {
    local ip="$1"
    
    # IPv4 validation
    if [[ "$ip" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
        local IFS='.'
        read -ra ADDR <<< "$ip"
        for i in "${ADDR[@]}"; do
            [[ $i -ge 0 && $i -le 255 ]] || return 1
        done
        return 0
    fi
    
    # IPv6 validation (basic)
    if [[ "$ip" =~ ^([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}$ ]]; then
        return 0
    fi
    
    return 1
}

# Check if IP is private/local
is_private_ip() {
    local ip="$1"
    
    # IPv4 private ranges
    if [[ "$ip" =~ ^(10\.|172\.(1[6-9]|2[0-9]|3[0-1])\.|192\.168\.|127\.|169\.254\.) ]]; then
        return 0
    fi
    
    # IPv6 private ranges
    if [[ "$ip" =~ ^(fe80:|fc00:|fd00:|::1$) ]]; then
        return 0
    fi
    
    return 1
}

# Extract IP addresses with improved regex and multi-service support
extract_ips() {
    local pattern="$1"
    local time_filter="$2"
    local service_filter="$3"
    
    # Build service-specific patterns
    local service_patterns=()
    IFS=',' read -ra SERVICES_ARRAY <<< "$SERVICES"
    for service in "${SERVICES_ARRAY[@]}"; do
        case "$service" in
            "ssh")
                service_patterns+=("sshd")
                ;;
            "ftp")
                service_patterns+=("vsftpd|proftpd|pure-ftpd")
                ;;
            "pop3")
                service_patterns+=("dovecot|cyrus")
                ;;
            "imap")
                service_patterns+=("dovecot|cyrus")
                ;;
            "smtp")
                service_patterns+=("postfix|exim|sendmail")
                ;;
        esac
    done
    
    local service_regex=$(IFS='|'; echo "${service_patterns[*]}")
    
    if [[ -n "$time_filter" ]]; then
        grep -Ei "$pattern" "$LOGFILE" | grep "$time_filter" | grep -Ei "$service_regex" | grep -Eo "([0-9]{1,3}\.){3}[0-9]{1,3}|([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}" | sort -u
    else
        grep -Ei "$pattern" "$LOGFILE" | grep -Ei "$service_regex" | grep -Eo "([0-9]{1,3}\.){3}[0-9]{1,3}|([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}" | sort -u
    fi
}

# Enhanced geographic information with caching and IPv6 support
geo_info() {
    local ip="$1"
    
    if [[ "$ENABLE_GEOIP" != "true" ]]; then
        echo "  IP: $ip"
        return
    fi
    
    # Check cache first
    local cached_info
    cached_info=$(get_cached_info "$ip")
    if [[ -n "$cached_info" ]]; then
        echo "  IP: $ip  $cached_info"
        return
    fi
    
    # Check if IP is private/local
    if is_private_ip "$ip"; then
        local info="🏠 Local/Private"
        set_cached_info "$ip" "$info"
        echo "  IP: $ip  $info"
        return
    fi
    
    # Use timeout to prevent hanging
    local country
    country=$(timeout "$GEOIP_TIMEOUT" geoiplookup "$ip" 2>/dev/null | awk -F ': ' '{print $2}' | xargs)
    
    local info
    if [[ -n "$country" && "$country" != "IP Address not found" ]]; then
        info="🌍 $country"
    else
        info="🌐 Unknown"
    fi
    
    set_cached_info "$ip" "$info"
    echo "  IP: $ip  $info"
}

# Check if IP is whitelisted
is_whitelisted() {
    local ip="$1"
    [[ -f "$WHITELIST_FILE" ]] && grep -q "^$ip$" "$WHITELIST_FILE"
}

# Check if IP is blacklisted
is_blacklisted() {
    local ip="$1"
    [[ -f "$BLACKLIST_FILE" ]] && grep -q "^$ip$" "$BLACKLIST_FILE"
}

# Backend-specific banning functions
ban_ip_iptables() {
    local ip="$1"
    local reason="$2"
    
    # Create chain if it doesn't exist
    if ! iptables -L "$CHAIN_NAME" &>/dev/null; then
        iptables -N "$CHAIN_NAME"
        iptables -I INPUT -j "$CHAIN_NAME"
    fi
    
    # Add ban rule
    iptables -A "$CHAIN_NAME" -s "$ip" -j DROP
    
    # IPv6 support
    if [[ "$ENABLE_IPv6" == "true" && "$ip" =~ ":" ]]; then
        if ! ip6tables -L "$CHAIN_NAME" &>/dev/null; then
            ip6tables -N "$CHAIN_NAME"
            ip6tables -I INPUT -j "$CHAIN_NAME"
        fi
        ip6tables -A "$CHAIN_NAME" -s "$ip" -j DROP
    fi
    
    log "INFO" "🚫 Banned IP (iptables): $ip ($reason)"
}

ban_ip_nftables() {
    local ip="$1"
    local reason="$2"
    
    # Create table and chain if they don't exist
    nft add table ip ssh-monitor 2>/dev/null || true
    nft add chain ip ssh-monitor input 2>/dev/null || true
    nft add rule ip ssh-monitor input ip saddr "$ip" drop 2>/dev/null || true
    
    # IPv6 support
    if [[ "$ENABLE_IPv6" == "true" && "$ip" =~ ":" ]]; then
        nft add table ip6 ssh-monitor 2>/dev/null || true
        nft add chain ip6 ssh-monitor input 2>/dev/null || true
        nft add rule ip6 ssh-monitor input ip6 saddr "$ip" drop 2>/dev/null || true
    fi
    
    log "INFO" "🚫 Banned IP (nftables): $ip ($reason)"
}

ban_ip_firewalld() {
    local ip="$1"
    local reason="$2"
    
    # Create zone if it doesn't exist
    firewall-cmd --permanent --new-zone="$ZONE_NAME" 2>/dev/null || true
    
    # Add IP to zone
    if [[ "$ip" =~ ":" ]]; then
        firewall-cmd --permanent --zone="$ZONE_NAME" --add-source="$ip"
    else
        firewall-cmd --permanent --zone="$ZONE_NAME" --add-source="$ip"
    fi
    
    # Reload firewall
    firewall-cmd --reload
    
    log "INFO" "🚫 Banned IP (firewalld): $ip ($reason)"
}

ban_ip_pf() {
    local ip="$1"
    local reason="$2"
    
    # Add to pf table
    echo "block in proto tcp from $ip" | pfctl -f - 2>/dev/null || true
    
    log "INFO" "🚫 Banned IP (pf): $ip ($reason)"
}

# Enhanced IP banning with multiple backend support
ban_ip() {
    local ip="$1"
    local reason="$2"
    
    if [[ "$ENABLE_BANNING" != "true" ]]; then
        log "INFO" "Banning disabled, would ban IP: $ip ($reason)"
        return
    fi
    
    # Validate IP
    if ! is_valid_ip "$ip"; then
        log "WARN" "Invalid IP address: $ip"
        return
    fi
    
    # Check if already banned
    if is_ip_banned "$ip"; then
        log "DEBUG" "IP $ip is already banned"
        return
    fi
    
    # Check whitelist
    if is_whitelisted "$ip"; then
        log "WARN" "IP $ip is whitelisted, skipping ban"
        return
    fi
    
    # Add to blacklist file
    if [[ -f "$BLACKLIST_FILE" ]]; then
        echo "$ip" >> "$BLACKLIST_FILE"
    fi
    
    # Ban using appropriate backend
    case "$BACKEND" in
        "iptables")
            ban_ip_iptables "$ip" "$reason"
            ;;
        "nftables")
            ban_ip_nftables "$ip" "$reason"
            ;;
        "firewalld")
            ban_ip_firewalld "$ip" "$reason"
            ;;
        "pf")
            ban_ip_pf "$ip" "$reason"
            ;;
    esac
    
    echo "$(date '+%Y-%m-%d %H:%M:%S') - BANNED: $ip - $reason" >> "$BANNED_LOG"
}

# Check if IP is already banned
is_ip_banned() {
    local ip="$1"
    
    case "$BACKEND" in
        "iptables")
            iptables -L "$CHAIN_NAME" -n 2>/dev/null | grep -q "$ip" || return 1
            ;;
        "nftables")
            nft list ruleset 2>/dev/null | grep -q "$ip" || return 1
            ;;
        "firewalld")
            firewall-cmd --zone="$ZONE_NAME" --list-sources 2>/dev/null | grep -q "$ip" || return 1
            ;;
        "pf")
            pfctl -t sshguard -T show 2>/dev/null | grep -q "$ip" || return 1
            ;;
    esac
}

# Unban IP with backend support
unban_ip() {
    local ip="$1"
    
    case "$BACKEND" in
        "iptables")
            iptables -D "$CHAIN_NAME" -s "$ip" -j DROP 2>/dev/null || true
            if [[ "$ENABLE_IPv6" == "true" && "$ip" =~ ":" ]]; then
                ip6tables -D "$CHAIN_NAME" -s "$ip" -j DROP 2>/dev/null || true
            fi
            ;;
        "nftables")
            nft delete rule ip ssh-monitor input ip saddr "$ip" drop 2>/dev/null || true
            if [[ "$ENABLE_IPv6" == "true" && "$ip" =~ ":" ]]; then
                nft delete rule ip6 ssh-monitor input ip6 saddr "$ip" drop 2>/dev/null || true
            fi
            ;;
        "firewalld")
            firewall-cmd --permanent --zone="$ZONE_NAME" --remove-source="$ip" 2>/dev/null || true
            firewall-cmd --reload
            ;;
        "pf")
            echo "pass in proto tcp from $ip" | pfctl -f - 2>/dev/null || true
            ;;
    esac
    
    # Remove from blacklist file
    if [[ -f "$BLACKLIST_FILE" ]]; then
        sed -i "/^$ip$/d" "$BLACKLIST_FILE"
    fi
    
    log "INFO" "✅ Unbanned IP: $ip"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - UNBANNED: $ip" >> "$BANNED_LOG"
}

# Generate statistics with backend information
generate_stats() {
    local stats_file="/tmp/ssh-monitor-stats-$$.json"
    
    # Get banned count based on backend
    local banned_count=0
    case "$BACKEND" in
        "iptables")
            banned_count=$(iptables -L "$CHAIN_NAME" -n 2>/dev/null | grep DROP | wc -l || echo 0)
            ;;
        "nftables")
            banned_count=$(nft list ruleset 2>/dev/null | grep -c "drop" || echo 0)
            ;;
        "firewalld")
            banned_count=$(firewall-cmd --zone="$ZONE_NAME" --list-sources 2>/dev/null | wc -l || echo 0)
            ;;
        "pf")
            banned_count=$(pfctl -t sshguard -T show 2>/dev/null | wc -l || echo 0)
            ;;
    esac
    
    cat > "$stats_file" << EOF
{
  "timestamp": "$(date -Iseconds)",
  "logfile": "$LOGFILE",
  "threshold": $THRESHOLD,
  "backend": "$BACKEND",
  "services": "$SERVICES",
  "successful_logins": $(extract_ips "Accepted password|Accepted publickey" | wc -l),
  "failed_attempts": $(extract_ips "Failed password|Invalid user" | wc -l),
  "disconnections": $(extract_ips "Disconnected from" | wc -l),
  "banned_ips": $banned_count,
  "whitelisted_ips": $([[ -f "$WHITELIST_FILE" ]] && wc -l < "$WHITELIST_FILE" || echo 0),
  "blacklisted_ips": $([[ -f "$BLACKLIST_FILE" ]] && wc -l < "$BLACKLIST_FILE" || echo 0),
  "ipv6_enabled": $([[ "$ENABLE_IPv6" == "true" ]] && echo "true" || echo "false"),
  "caching_enabled": $([[ "$ENABLE_CACHING" == "true" ]] && echo "true" || echo "false")
}
EOF
    
    if [[ "$JSON_OUTPUT" == "true" ]]; then
        cat "$stats_file"
    fi
}

# Show help
show_help() {
    cat << EOF
SSH Security Monitor & IP Banning System v2.1.0

Usage: $0 [OPTIONS]

OPTIONS:
    -c, --config FILE     Configuration file (default: $CONFIG_FILE)
    -l, --logfile FILE    SSH log file (default: $DEFAULT_LOGFILE)
    -t, --threshold NUM   Failed attempts threshold (default: $DEFAULT_THRESHOLD)
    -b, --ban-log FILE    Banned IPs log file (default: $DEFAULT_BANNED_LOG)
    -w, --whitelist FILE  Whitelist file (default: $DEFAULT_WHITELIST_FILE)
    -k, --blacklist FILE  Blacklist file (default: $DEFAULT_BLACKLIST_FILE)
    -r, --report FILE     Report log file (default: $DEFAULT_REPORT_FILE)
    -d, --daemon          Run in daemon mode (continuous monitoring)
    -i, --interval SEC    Daemon interval in seconds (default: 300)
    -j, --json            Output statistics in JSON format
    -q, --quiet           Quiet mode (minimal output)
    --no-geoip           Disable geographic IP lookup
    --no-ban             Disable automatic IP banning
    --no-report          Disable report logging
    --no-ipv6            Disable IPv6 support
    --no-cache           Disable caching
    -u, --unban IP       Unban specific IP address
    -s, --stats          Show statistics only
    --backend BACKEND    Firewall backend (iptables|nftables|firewalld|pf)
    --services SERVICES  Comma-separated list of services to monitor
    -h, --help           Show this help message

EXAMPLES:
    $0                    # Run with default settings
    $0 -d -i 60          # Run as daemon with 1-minute intervals
    $0 -u 192.168.1.100  # Unban specific IP
    $0 -s -j             # Show statistics in JSON format
    $0 --no-ban          # Monitor without banning
    $0 --backend nftables # Use nftables backend
    $0 --services ssh,ftp # Monitor SSH and FTP

CONFIGURATION:
    Create $CONFIG_FILE to customize settings permanently.
    Whitelist IPs by adding them to $WHITELIST_FILE (one per line).
    Blacklist IPs by adding them to $BLACKLIST_FILE (one per line).

BACKENDS:
    iptables  - Traditional Linux firewall (default)
    nftables  - Modern Linux firewall
    firewalld - Red Hat firewall daemon
    pf        - BSD firewall

SERVICES:
    ssh, ftp, pop3, imap, smtp

EOF
}

# Parse command line arguments
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -c|--config)
                CONFIG_FILE="$2"
                shift 2
                ;;
            -l|--logfile)
                LOGFILE="$2"
                shift 2
                ;;
            -t|--threshold)
                THRESHOLD="$2"
                shift 2
                ;;
            -b|--ban-log)
                BANNED_LOG="$2"
                shift 2
                ;;
            -w|--whitelist)
                WHITELIST_FILE="$2"
                shift 2
                ;;
            -k|--blacklist)
                BLACKLIST_FILE="$2"
                shift 2
                ;;
            -r|--report)
                REPORT_FILE="$2"
                shift 2
                ;;
            -d|--daemon)
                DAEMON_MODE=true
                shift
                ;;
            -i|--interval)
                WATCH_INTERVAL="$2"
                shift 2
                ;;
            -j|--json)
                JSON_OUTPUT=true
                shift
                ;;
            -q|--quiet)
                QUIET_MODE=true
                shift
                ;;
            --no-geoip)
                ENABLE_GEOIP=false
                shift
                ;;
            --no-ban)
                ENABLE_BANNING=false
                shift
                ;;
            --no-report)
                ENABLE_REPORTING=false
                shift
                ;;
            --no-ipv6)
                ENABLE_IPv6=false
                shift
                ;;
            --no-cache)
                ENABLE_CACHING=false
                shift
                ;;
            -u|--unban)
                check_root
                unban_ip "$2"
                exit 0
                ;;
            -s|--stats)
                generate_stats
                exit 0
                ;;
            --backend)
                BACKEND="$2"
                shift 2
                ;;
            --services)
                SERVICES="$2"
                shift 2
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                error_exit "Unknown option: $1"
                ;;
        esac
    done
}

# Main monitoring function with performance optimizations
monitor_ssh() {
    # Remove date filtering by setting current_time to empty
    local current_time=""
    
    if [[ "$QUIET_MODE" != "true" ]]; then
        echo -e "${CYAN}=== 🚨 SSH Security Monitor v2.1.0 ===${NC}"
        echo -e "${CYAN}Timestamp: $(date)${NC}"
        echo -e "${CYAN}Log file: $LOGFILE${NC}"
        echo -e "${CYAN}Backend: $BACKEND${NC}"
        echo -e "${CYAN}Services: $SERVICES${NC}"
        echo -e "${CYAN}Threshold: $THRESHOLD failed attempts${NC}"
        echo -e "${CYAN}IPv6: $([[ "$ENABLE_IPv6" == "true" ]] && echo "Enabled" || echo "Disabled")${NC}"
        echo
    fi
    
    # Successful logins
    local successful_ips
    successful_ips=$(extract_ips "Accepted password|Accepted publickey" "$current_time" "$SERVICES")
    
    if [[ -n "$successful_ips" ]]; then
        if [[ "$QUIET_MODE" != "true" ]]; then
            echo -e "${GREEN}✅ Successful logins:${NC}"
            echo "$successful_ips" | while read -r ip; do
                geo_info "$ip"
            done
            echo
        fi
    fi
    
    # Failed login attempts with enhanced detection
    local failed_attempts
    failed_attempts=$(extract_ips "Failed password|Invalid user|authentication failure" "$current_time" "$SERVICES" | sort | uniq -c)
    
    if [[ -n "$failed_attempts" ]]; then
        if [[ "$QUIET_MODE" != "true" ]]; then
            echo -e "${RED}❌ Failed login attempts:${NC}"
        fi
        
        echo "$failed_attempts" | while read -r count ip; do
            if [[ "$QUIET_MODE" != "true" ]]; then
                geo_info "$ip"
                echo "    Attempts: $count"
            fi
            
            # Ban after 2 or more failed attempts
            if [[ "$count" -ge 2 ]]; then
                ban_ip "$ip" "Exceeded 2 failed attempts ($count total)"
            fi
        done
        
        if [[ "$QUIET_MODE" != "true" ]]; then
            echo
        fi
    fi
    
    # Disconnected sessions
    local disconnected_ips
    disconnected_ips=$(extract_ips "Disconnected from|Connection closed" "$current_time" "$SERVICES")
    
    if [[ -n "$disconnected_ips" ]]; then
        if [[ "$QUIET_MODE" != "true" ]]; then
            echo -e "${YELLOW}🔌 Disconnected sessions:${NC}"
            echo "$disconnected_ips" | while read -r ip; do
                geo_info "$ip"
            done
            echo
        fi
    fi
    
    # Show current bans
    if [[ "$ENABLE_BANNING" == "true" ]]; then
        local banned_count
        case "$BACKEND" in
            "iptables")
                banned_count=$(iptables -L "$CHAIN_NAME" -n 2>/dev/null | grep DROP | wc -l || echo 0)
                ;;
            "nftables")
                banned_count=$(nft list ruleset 2>/dev/null | grep -c "drop" || echo 0)
                ;;
            "firewalld")
                banned_count=$(firewall-cmd --zone="$ZONE_NAME" --list-sources 2>/dev/null | wc -l || echo 0)
                ;;
            "pf")
                banned_count=$(pfctl -t sshguard -T show 2>/dev/null | wc -l || echo 0)
                ;;
        esac
        
        if [[ "$QUIET_MODE" != "true" ]]; then
            echo -e "${PURPLE}🚫 Currently banned IPs: $banned_count${NC}"
        fi
    fi
    
    # Generate statistics if requested
    if [[ "$JSON_OUTPUT" == "true" ]]; then
        generate_stats
    fi
}

# Daemon mode with PID file management
run_daemon() {
    log "INFO" "Starting SSH monitor daemon (interval: ${WATCH_INTERVAL}s)"
    
    # Create PID file
    echo $$ > "$PID_FILE"
    
    # Trap signals for clean exit
    trap 'cleanup_daemon' SIGINT SIGTERM
    
    while true; do
        monitor_ssh
        sleep "$WATCH_INTERVAL"
    done
}

# Cleanup daemon resources
cleanup_daemon() {
    log "INFO" "Stopping SSH monitor daemon"
    rm -f "$PID_FILE"
    exit 0
}

# Main execution
main() {
    # Parse arguments first
    parse_args "$@"
    
    # Load configuration
    load_config
    
    # Validate configuration
    validate_config
    
    # Check dependencies
    check_dependencies
    
    # Initialize cache
    init_cache
    
    # Check root privileges if banning is enabled
    if [[ "$ENABLE_BANNING" == "true" ]]; then
        check_root
    fi
    
    # Create necessary directories and files
    mkdir -p "$(dirname "$BANNED_LOG")"
    mkdir -p "$(dirname "$REPORT_FILE")"
    mkdir -p "$(dirname "$PID_FILE")"
    touch "$BANNED_LOG"
    touch "$REPORT_FILE"
    
    # Run in daemon mode or single execution
    if [[ "$DAEMON_MODE" == "true" ]]; then
        run_daemon
    else
        monitor_ssh
    fi
}

# Trap signals for clean exit
trap 'log "INFO" "SSH monitor stopped"; exit 0' SIGINT SIGTERM

# Run main function with all arguments
main "$@" 